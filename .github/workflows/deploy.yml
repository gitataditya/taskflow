name: Deploy TaskFlow to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests (if any)
      run: |
        # Add your test commands here when you have tests
        python -c "import app; print('App imports successfully')"
    
    - name: Deploy to EC2
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        script: |
          # Check if this is first-time setup
          if [ ! -d "/var/www/taskflow" ]; then
            echo "🚀 First-time setup detected, running setup script..."
            
            # Update system
            sudo apt update -y
            sudo apt install -y python3 python3-pip python3-venv nginx git curl
            
            # Create directory and clone
            sudo mkdir -p /var/www
            cd /var/www
            sudo git clone https://github.com/gitataditya/taskflow.git
            sudo chown -R ubuntu:ubuntu taskflow
            cd taskflow
            
            # Setup virtual environment
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            
            # Initialize database
            python -c "from app import app, db; app.app_context().push(); db.create_all()"
            
            # Create systemd service
            sudo tee /etc/systemd/system/taskflow.service > /dev/null << 'EOF'
          [Unit]
          Description=TaskFlow Flask Application
          After=network.target
          
          [Service]
          Type=simple
          User=ubuntu
          WorkingDirectory=/var/www/taskflow
          Environment="PATH=/var/www/taskflow/venv/bin"
          Environment="FLASK_ENV=production"
          ExecStart=/var/www/taskflow/venv/bin/python app.py
          Restart=always
          RestartSec=10
          
          [Install]
          WantedBy=multi-user.target
          EOF
            
            # Configure nginx
            sudo tee /etc/nginx/sites-available/taskflow > /dev/null << 'EOF'
          server {
              listen 80;
              server_name _;
          
              location / {
                  proxy_pass http://127.0.0.1:8000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          
              location /static {
                  alias /var/www/taskflow/static;
                  expires 1y;
                  add_header Cache-Control "public, immutable";
              }
          }
          EOF
            
            # Enable services
            sudo ln -sf /etc/nginx/sites-available/taskflow /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo nginx -t
            sudo systemctl daemon-reload
            sudo systemctl enable taskflow
            sudo systemctl enable nginx
            
            echo "✅ First-time setup completed!"
          else
            echo "📁 Application directory exists, performing update..."
            cd /var/www/taskflow
            git pull origin main
            source venv/bin/activate
            pip install -r requirements.txt
            python -c "from app import app, db; app.app_context().push(); db.create_all()"
          fi
          
          # Start/restart services
          sudo systemctl start taskflow
          sudo systemctl restart nginx
          
          # Check service status
          echo "📊 Service Status:"
          sudo systemctl status taskflow --no-pager -l || true
          echo ""
          echo "🌐 Application URL: http://$(curl -s http://checkip.amazonaws.com/ || echo 'your-ec2-ip')"